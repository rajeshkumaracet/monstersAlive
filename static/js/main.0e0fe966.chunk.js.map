{"version":3,"sources":["Components/card/card.js","Components/card-list.js","Components/searchbox/searchbox.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","src","concat","users","id","name","email","CardList","console","log","map","card_Card","key","SearchBox","_ref","placeholder","handleChange","type","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","setState","findString","target","value","state","names","_this2","fetch","then","response","json","_this$state","filteredNames","filter","iNames","toLowerCase","includes","searchbox_SearchBox","card_list_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAKaA,eAAO,SAAAC,GAAK,OACpBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACVH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,aAAaC,IAAG,wBAAAC,OAA0BP,EAAMQ,MAAMC,GAAtC,4BACzBR,EAAAC,EAAAC,cAAA,UAAKH,EAAMQ,MAAME,MACjBT,EAAAC,EAAAC,cAAA,SAAIH,EAAMQ,MAAMG,UCJbC,SAAW,SAAAZ,GAEnB,OADAa,QAAQC,IAAId,GAEPC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACTJ,EAAMU,KAAKK,IAAI,SAAAL,GAAI,OACfT,EAAAC,EAAAC,cAACa,EAAD,CAAMC,IAAKP,EAAKD,GAAID,MAAOE,SCPlCQ,SAAY,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,YAAaC,EAAhBF,EAAgBE,aAAhB,OACpBpB,EAAAC,EAAAC,cAAA,SAAOmB,KAAK,SAASlB,UAAU,aAC1BgB,YAAaA,EACbG,SAAUF,MCkCLG,cAlCb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAYFP,aAAe,SAAAW,GACbP,EAAKQ,SAAS,CAAEC,WAAYF,EAAEG,OAAOC,SAZrCX,EAAKY,MAAQ,CACXC,MAAO,GACPJ,WAAY,IAJFT,mFAQM,IAAAc,EAAAX,KAClBY,MAAM,8CAA8CC,KAAK,SAAAC,GAAQ,OAC/DA,EAASC,OAAOF,KAAK,SAAAjC,GAAK,OAAI+B,EAAKN,SAAS,CAAEK,MAAO9B,yCAMhD,IAAAoC,EACuBhB,KAAKS,MAA3BC,EADDM,EACCN,MAAOJ,EADRU,EACQV,WACTW,EAAgBP,EAAMQ,OAAO,SAAAC,GAAM,OACvCA,EAAOrC,KAAKsC,cAAcC,SAASf,EAAWc,iBAEhD,OACE/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAC+C,EAAD,CACE9B,YAAY,gBACZC,aAAcO,KAAKP,eAErBpB,EAAAC,EAAAC,cAACgD,EAAD,CAAUzC,KAAMmC,YA7BNO,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.0e0fe966.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.css\";\r\n\r\n\r\n\r\nexport const Card = props => (\r\n     <div className=\"card-container\">\r\n          <img alt=\"userImages\" src={`https://robohash.org/${props.users.id}?set=set2&size=180x180`} />\r\n          <h2>{props.users.name}</h2>\r\n          <p>{props.users.email}</p>\r\n     </div >\r\n)","import React from \"react\";\r\nimport { Card } from \"../Components/card/card\";\r\nimport \"./card-style.css\";\r\n\r\n\r\nexport const CardList = props => {\r\n     console.log(props);\r\n     return (\r\n          <div className=\"card-list\">\r\n               {props.name.map(name => (\r\n                    <Card key={name.id} users={name} />\r\n               ))}\r\n          </div>\r\n     )\r\n}\r\n\r\n","import React from \"react\";\r\nimport \"./searchbox.css\";\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n     <input type=\"search\" className=\"search-box\"\r\n          placeholder={placeholder}\r\n          onChange={handleChange}\r\n     />\r\n)","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./Components/card-list\";\nimport { SearchBox } from \"./Components/searchbox/searchbox\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      names: [],\n      findString: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(response =>\n      response.json().then(users => this.setState({ names: users }))\n    );\n  }\n  handleChange = e => {\n    this.setState({ findString: e.target.value });\n  };\n  render() {\n    const { names, findString } = this.state;\n    const filteredNames = names.filter(iNames =>\n      iNames.name.toLowerCase().includes(findString.toLowerCase())\n    );\n    return (\n      <div className='App'>\n        <h1>Monster Alive!</h1>\n        <SearchBox\n          placeholder='Find Users...'\n          handleChange={this.handleChange}\n        />\n        <CardList name={filteredNames} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}